[{"C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\index.tsx":"1","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\App.tsx":"2","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\pages\\Home.tsx":"3","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\pages\\Match.tsx":"4","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\config\\index.ts":"5","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\api\\index.ts":"6","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\constants\\index.ts":"7","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\utils\\index.ts":"8","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\assets\\index.ts":"9"},{"size":219,"mtime":1607454693003,"results":"10","hashOfConfig":"11"},{"size":573,"mtime":1615231072294,"results":"12","hashOfConfig":"11"},{"size":1365,"mtime":1615231937588,"results":"13","hashOfConfig":"11"},{"size":10715,"mtime":1615233626860,"results":"14","hashOfConfig":"11"},{"size":905,"mtime":1615231283790,"results":"15","hashOfConfig":"11"},{"size":2378,"mtime":1611942965562,"results":"16","hashOfConfig":"11"},{"size":3586,"mtime":1607529092231,"results":"17","hashOfConfig":"11"},{"size":3093,"mtime":1615231682351,"results":"18","hashOfConfig":"11"},{"size":525,"mtime":1615231022666,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"14tqfkm",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\index.tsx",[],["42","43"],"C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\App.tsx",[],"C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\pages\\Home.tsx",["44"],"import React from 'react';\r\nimport '../App.scss';\r\nimport { useHistory } from 'react-router-dom';\r\nimport config from '../config';\r\n\r\nimport { Input, Button, Alert } from 'antd';\r\nimport { trimURL } from '../utils';\r\n\r\nconst Home = () => {\r\n    const [url, setURL] = React.useState<string>(\"\");\r\n    const [lastSearched, setLastSearched] = React.useState<String | null>();\r\n\r\n    const history = useHistory();\r\n\r\n    const search = () => {\r\n        const id = trimURL(url);\r\n        history.push('/match/' + id)\r\n        localStorage.setItem('last_searched', id.toString())\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const lastSearched = localStorage.getItem('last_searched');\r\n        if(lastSearched) setLastSearched(lastSearched);\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"page\">\r\n            <span className=\"title tracking-in-expand\">FACEIT TIPS</span>\r\n            <div className=\"col container\">\r\n                <Alert className=\"alert\" message={config.WELCOME_MESSAGE} />\r\n                <Input bordered={false} placeholder=\"Match ID or URL\" className=\"input\" onChange={e => { setURL(e.target.value) }}/>\r\n                <Button className=\"button\" type=\"text\" onClick={search}>Analyze</Button>\r\n            </div>\r\n            <span className=\"version\">Closed Beta v{config.VERSION}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\pages\\Match.tsx",["45","46","47","48","49","50"],"import React from 'react';\r\nimport '../App.scss';\r\nimport { useParams } from 'react-router-dom';\r\nimport config from '../config';\r\n\r\nimport { Input, Button } from 'antd';\r\nimport { fetchMatch, fetchVoting, getPlayerInfo, getPlayerMatches } from '../api';\r\nimport { MatchStatus, mapsImages, maps } from '../constants';\r\nimport { convertMatches, averageOfMatches, countPoints } from '../utils';\r\n\r\nimport { Divider } from 'antd';\r\n\r\nimport {\r\n    level1,\r\n    level2,\r\n    level3,\r\n    level4,\r\n    level5,\r\n    level6,\r\n    level7,\r\n    level8,\r\n    level9,\r\n    level10\r\n} from '../assets';\r\n\r\nconst levels: {[index: string]:any} = {\r\n    1: level1,\r\n    2: level2,\r\n    3: level3,\r\n    4: level4,\r\n    5: level5,\r\n    6: level6,\r\n    7: level7,\r\n    8: level8,\r\n    9: level9,\r\n    10: level10,\r\n}\r\n\r\ninterface ParamTypes{\r\n    id: string;\r\n}\r\n\r\nconst Match = () => {\r\n    const [error, setError] = React.useState<string | null>();\r\n    const [loaded, setLoaded] = React.useState<Boolean>(false);\r\n    const [match, setMatch] = React.useState<any>();\r\n    const [voting, setVoting] = React.useState<any>();\r\n    const [players, setPlayers] = React.useState<any>();\r\n    const [data, setData] = React.useState<any>();\r\n\r\n    const { id } = useParams<ParamTypes>();\r\n\r\n    const init = async () => {\r\n        const match = await fetchMatch(id);\r\n        if(!match) return setError(\"Match ID is invalid\")\r\n        setMatch(match);\r\n        let voting = await fetchVoting(id, 'map');\r\n        setVoting(voting);\r\n        parseMaps(match);\r\n        console.log(match)\r\n        console.log(voting)\r\n        setLoaded(true);\r\n    }\r\n\r\n    const parseMaps = async (match: any) => {\r\n        let data: any = {};\r\n        let players: any = {faction1: {}, faction2: {}};\r\n        // Create each map empty object\r\n        maps.forEach(map => {data[map] = {}})\r\n        if(match){\r\n            for (var i of [1, 2]){\r\n                // Get ids of players from 1 team\r\n                let ids = match.teams[`faction${i}`].roster.map((player: any) => player.id);\r\n                // Get basic info\r\n                let players_info = await getPlayerInfo({ ids });\r\n                // Get past 100 matches\r\n                let players_stats = await getPlayerMatches({ ids });\r\n                players[`faction${i}`] = {players_info, players_stats}\r\n                // Filter matches and get average stats\r\n                for(var j in maps){\r\n                    let team_data = ids.map((id: string, k: number) => {\r\n                        let map_matches = players_stats[k].filter((match: any) => match['i1'] === maps[j]);\r\n                        map_matches = convertMatches(map_matches);\r\n                        map_matches = averageOfMatches(map_matches);\r\n                        return map_matches;\r\n                    })\r\n                    data[maps[j]][`faction${i}`] = averageOfMatches(team_data);\r\n                }\r\n            }\r\n        }\r\n        data = countPoints(data);\r\n        setData(data);\r\n        processPlayers(players);\r\n    }\r\n\r\n    const processPlayers = (players: any) => {\r\n        let to_return: any = {faction1: [], faction2: [] };\r\n        for(var team in players){\r\n            let player = {}; // Should be { ... playerinfo, matches: [] }\r\n            // Get average of player's maps\r\n            players[team].players_stats.forEach((player_matches: any, i: number) => {\r\n                let matches = convertMatches(player_matches);\r\n                matches = averageOfMatches(matches);\r\n                to_return[team].push({...players[team].players_info[i], matches})\r\n            })\r\n            \r\n        }\r\n        setPlayers(to_return);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        init();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"page\">\r\n            <div className=\"col container\" style={{ paddingBottom: 100 }}>\r\n                <span className=\"header\">Match</span>\r\n                {!loaded && !error? <span>Loading ...</span>\r\n                :!loaded && error? <span className=\"error\">{error}</span>\r\n                : loaded && match? (\r\n                    <>\r\n                        <div className=\"row\" style={{ justifyContent: \"center\" }}>\r\n                            <span className=\"text\">{match.status}  •  {match.game}  •  {match.region}</span>\r\n                        </div>\r\n\r\n                        {match.status !== MatchStatus.FINISHED? <span className=\"header\">Current Score</span> : null }\r\n                        {match.results && match.status !== MatchStatus.FINISHED? (\r\n                            <div className=\"row\">\r\n                                <div className=\"col\">\r\n                                    <span className=\"text\">{match.results[0].factions.faction1.score}</span>\r\n                                </div>\r\n                                <div className=\"col\">\r\n                                    <span className=\"text\">{match.results[0].factions.faction1.score}</span>\r\n                                </div>\r\n                            </div>\r\n\r\n                        ) : null}\r\n\r\n                        <Divider />\r\n\r\n                        {match.teams?.faction1?.stats && (\r\n                            <div className=\"col\">\r\n                                <span className=\"header\">Win Probability</span>\r\n                                <div className=\"row\" style={{ justifyContent: \"space-evenly\" }}>\r\n                                    <span className=\"text\">{(match.teams.faction1.stats.winProbability * 100).toFixed(2)}%</span>\r\n                                    <span className=\"text\">{(match.teams.faction2.stats.winProbability * 100).toFixed(2)}%</span>\r\n                                </div>\r\n                                <Divider />\r\n                            </div>\r\n                        )}\r\n\r\n                        <div className=\"header\">Teams Overview</div>\r\n                        <div className=\"row\">\r\n                            {Object.keys(match.teams).map((team: any, i) => {\r\n                                team = match.teams[team]\r\n                                let winner;\r\n                                if(match.results){\r\n                                    winner = match.results[0].winner === `faction${i+1}`\r\n                                }\r\n                                return(\r\n                                <div className=\"col\" key={i} style={{ flex: 1, alignItems: \"center\" }}>\r\n                                    <span className=\"team-name\">{team.name}</span>\r\n                                    {match.status === MatchStatus.FINISHED && match.results? <span className={winner? \"winner\" : \"loser\"}>{winner? \"Winner\" : \"Loser\"}</span> : null}\r\n                                    {players? players[`faction${i+1}`].map((player:any, j: number) => {\r\n                                        return(\r\n                                        <div key={j} className=\"player-container\">\r\n                                            <div className=\"nickname-container\" style={{ flexDirection: i === 0? \"row\" : \"row-reverse\" }}>\r\n                                                <span className=\"player-name\">{player.nickname}</span>\r\n                                                <div className=\"level\" style={{ flexDirection: i === 0? \"row\" : \"row-reverse\" }}>\r\n                                                    <span className=\"elo\">{player.games.csgo.faceit_elo}</span>\r\n                                                    <img src={levels[player.csgo_skill_level]} alt=\"level\" className=\"level-icon\" />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"stats\">\r\n                                                {Object.keys(player.matches).map((stat, k) => {return(\r\n                                                    <div className=\"stat-container\" key={k}>\r\n                                                        <span className=\"stat-name\"><u>{stat}</u></span>\r\n                                                        <span className=\"stat-value\">{player.matches[stat]}</span>\r\n                                                    </div>\r\n                                                )})}\r\n                                            </div>\r\n                                        </div>\r\n                                    )}): null}\r\n                                </div>\r\n                            )})}\r\n                        </div>\r\n\r\n                        {data && (\r\n                            <>\r\n                            <Divider />\r\n                            <div className=\"header\">Map Analysis</div>\r\n                            <div className=\"maps\">\r\n                                {Object.keys(data).map((map, i) => {\r\n                                    let vote = voting.find((MAP: any) => MAP.properties.guid === map)\r\n                                    let banned = vote.status === 'drop';\r\n                                    let picked = vote.status === 'pick';\r\n                                    return(\r\n                                        <div className={`map ${picked? \"picked\" : banned? \"banned\" : null}`}>\r\n                                            <div key={i}>\r\n                                                <span className=\"points\">{data[map].team1}</span>\r\n                                                <img src={mapsImages[map]} alt=\"map\" className=\"mapImage\" />\r\n                                                <span className=\"points\">{data[map].team2}</span>\r\n                                            </div>\r\n                                            <div className=\"col\">\r\n                                                {Object.keys(data[map].faction1).map((key, i) => {return(\r\n                                                    <div className=\"row\">\r\n                                                        <span className=\"key\">{key}:</span>\r\n                                                        <span> {data[map].faction1[key]} - {data[map].faction2[key]}</span>\r\n                                                    </div>\r\n                                                )})}\r\n                                            </div>\r\n                                        </div>\r\n                                )})}\r\n                            </div>\r\n                            </>\r\n                        )}\r\n                    </>\r\n                )\r\n                : null}\r\n                <Button className=\"button back\" type=\"ghost\" href=\"/\">Back</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Match;","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\config\\index.ts",[],"C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\api\\index.ts",[],"C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\constants\\index.ts",[],"C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\utils\\index.ts",["51"],"const { FaceitIndex, average_allowed } = require('../constants');\r\n\r\nexport const trimURL = (url: string): string => url.split('/')[url.split('/').length - 1]\r\n\r\n// Convert snapshot to list\r\nexport const getListFromSnapshot = (snapshot: any) => {\r\n    let items: any[] = [];\r\n    snapshot.forEach((item: { val: () => any; key: any; }) => { items.push( {...item.val(), key: item.key} )  })\r\n    return items;\r\n}\r\n\r\n// Sort matches by date created\r\nexport const sortMatches = (matches: any[]) => {\r\n    return matches.sort((a: { createdAt: string | number | Date; },b: { createdAt: string | number | Date; }) => (new Date(a.createdAt).getTime() > new Date(b.createdAt).getTime()) ? 1 : ((new Date(b.createdAt).getTime() > new Date(a.createdAt).getTime()) ? -1 : 0)); \r\n}\r\n\r\n// Returns true if player id is in match\r\nexport const checkMyselfInMatch = (match: any, id: String) => {\r\n    if(match && match.teams){\r\n        let players = [];\r\n        for (const [key, value] of Object.entries(match.teams)){\r\n            for(var i in match.teams[key].roster){\r\n                players.push(match.teams[key].roster[i].id)\r\n            }\r\n        }\r\n        return players.includes(id)\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const convertMatches = (matches: any[]) => {\r\n    let indexes = Object.keys(FaceitIndex)\r\n    return matches.map((match: any) => {\r\n        for(const [key, value] of Object.entries(match)){\r\n            if(indexes.includes(key)){\r\n                match[FaceitIndex[key]] = value;\r\n                delete match[key];\r\n            }\r\n        }\r\n        return match;\r\n    })\r\n}\r\n\r\nexport const average = (array: any[]) => {\r\n    return +(array.reduce((a: string, b: string) => parseFloat(a) + parseFloat(b)) / array.length).toFixed(2);\r\n}\r\n\r\nexport const averageOfMatches = (matches: any[]) => {\r\n    let average: any = {};\r\n    average_allowed.forEach((key: string | number) => {\r\n        let matches_ = matches.map((match: { [x: string]: any; }) => match[key]);\r\n        average[key] = matches_.length > 0? +(matches_.reduce((a: string,b: string) => parseFloat(a) + parseFloat(b)) / matches_.length).toFixed(2) : 0\r\n    })\r\n    return average; \r\n}\r\n\r\nexport const countPoints = (data: any) => {\r\n    for(const [map, overall_stats] of Object.entries(data)){\r\n        let stats:any = overall_stats;\r\n        let team1 = 0;\r\n        let team2 = 0;\r\n        for(var key of average_allowed){\r\n            if(stats['faction1'][key] > stats['faction2'][key] && key !== 'Deaths'){\r\n                team1++;\r\n            } else if(stats['faction1'][key] < stats['faction2'][key] && key !== 'Deaths') {\r\n                team2++;\r\n            } else if(key === 'Deaths' && stats['faction1'][key] > stats['faction2'][key]){\r\n                team2++;\r\n            } else if(key === 'Deaths' && stats['faction1'][key] < stats['faction2'][key]){\r\n                team1++;\r\n            } else {\r\n                team1++;\r\n                team2++;\r\n            }\r\n        }\r\n        data[map]['team1'] = team1;\r\n        data[map]['team2'] = team2;\r\n    }\r\n    return data;\r\n}","C:\\Users\\TSecret\\Documents\\GitHub\\faceit-stats\\src\\assets\\index.ts",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":11,"column":12,"nodeType":"58","messageId":"59","endLine":11,"endColumn":24},{"ruleId":"56","severity":1,"message":"60","line":4,"column":8,"nodeType":"58","messageId":"59","endLine":4,"endColumn":14},{"ruleId":"56","severity":1,"message":"61","line":6,"column":10,"nodeType":"58","messageId":"59","endLine":6,"endColumn":15},{"ruleId":"62","severity":1,"message":"63","line":81,"column":45,"nodeType":"64","messageId":"65","endLine":86,"endColumn":22},{"ruleId":"56","severity":1,"message":"66","line":99,"column":17,"nodeType":"58","messageId":"59","endLine":99,"endColumn":23},{"ruleId":"62","severity":1,"message":"67","line":101,"column":49,"nodeType":"64","messageId":"65","endLine":105,"endColumn":14},{"ruleId":"68","severity":1,"message":"69","line":113,"column":8,"nodeType":"70","endLine":113,"endColumn":10,"suggestions":"71"},{"ruleId":"56","severity":1,"message":"72","line":21,"column":26,"nodeType":"58","messageId":"59","endLine":21,"endColumn":31},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"@typescript-eslint/no-unused-vars","'lastSearched' is assigned a value but never used.","Identifier","unusedVar","'config' is defined but never used.","'Input' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'j'.","ArrowFunctionExpression","unsafeRefs","'player' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'team', 'team'.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.","ArrayExpression",["75"],"'value' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [init]",{"range":"78","text":"79"},[3734,3736],"[init]"]