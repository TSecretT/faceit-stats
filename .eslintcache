[{"/Users/tsecret/Documents/GitHub/faceit-stats/src/index.tsx":"1","/Users/tsecret/Documents/GitHub/faceit-stats/src/App.tsx":"2","/Users/tsecret/Documents/GitHub/faceit-stats/src/pages/Home.tsx":"3","/Users/tsecret/Documents/GitHub/faceit-stats/src/pages/Match.tsx":"4","/Users/tsecret/Documents/GitHub/faceit-stats/src/config/index.ts":"5","/Users/tsecret/Documents/GitHub/faceit-stats/src/utils/index.ts":"6","/Users/tsecret/Documents/GitHub/faceit-stats/src/api/index.ts":"7","/Users/tsecret/Documents/GitHub/faceit-stats/src/assets/index.ts":"8","/Users/tsecret/Documents/GitHub/faceit-stats/src/constants/index.ts":"9","/Users/tsecret/Documents/GitHub/faceit-stats/src/components/index.ts":"10","/Users/tsecret/Documents/GitHub/faceit-stats/src/components/PlayerCard.tsx":"11","/Users/tsecret/Documents/GitHub/faceit-stats/src/components/Feedback.tsx":"12","/Users/tsecret/Documents/GitHub/faceit-stats/src/pages/index.ts":"13","/Users/tsecret/Documents/GitHub/faceit-stats/src/pages/Player.tsx":"14"},{"size":219,"mtime":1626970160942,"results":"15","hashOfConfig":"16"},{"size":610,"mtime":1628361922281,"results":"17","hashOfConfig":"16"},{"size":1446,"mtime":1628358819216,"results":"18","hashOfConfig":"16"},{"size":9804,"mtime":1628410229872,"results":"19","hashOfConfig":"16"},{"size":265,"mtime":1630149806283,"results":"20","hashOfConfig":"16"},{"size":4007,"mtime":1628358786736,"results":"21","hashOfConfig":"16"},{"size":2396,"mtime":1628362254180,"results":"22","hashOfConfig":"16"},{"size":503,"mtime":1626970160940,"results":"23","hashOfConfig":"16"},{"size":3488,"mtime":1626970160942,"results":"24","hashOfConfig":"16"},{"size":115,"mtime":1628357695968,"results":"25","hashOfConfig":"16"},{"size":1866,"mtime":1628408151531,"results":"26","hashOfConfig":"16"},{"size":751,"mtime":1626970160942,"results":"27","hashOfConfig":"16"},{"size":130,"mtime":1628361986269,"results":"28","hashOfConfig":"16"},{"size":964,"mtime":1628408147728,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1rnssqj",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},"/Users/tsecret/Documents/GitHub/faceit-stats/src/index.tsx",[],["66","67"],"/Users/tsecret/Documents/GitHub/faceit-stats/src/App.tsx",[],"/Users/tsecret/Documents/GitHub/faceit-stats/src/pages/Home.tsx",["68"],"import React from 'react';\nimport '../App.scss';\nimport { useHistory } from 'react-router-dom';\nimport config from '../config';\n\nimport { Input, Button, Alert } from 'antd';\nimport utils from '../utils';\n\nconst Home = () => {\n    const [url, setURL] = React.useState<string>(\"\");\n    const [lastSearched, setLastSearched] = React.useState<String | null>();\n\n    const history = useHistory();\n\n    const search = () => {\n        const id = utils.trimURL(url);\n        history.push('/match/' + id)\n        utils.addLastSearched(id);\n    }\n\n    React.useEffect(() => {\n        const lastSearched = localStorage.getItem('last_searched');\n        if(lastSearched) setLastSearched(lastSearched);\n    }, [])\n\n    return (\n        <div className=\"page\">\n            <span className=\"title tracking-in-expand\">FACEIT TIPS</span>\n            <div className=\"col container\">\n                <Alert className=\"alert\" message={config.WELCOME_MESSAGE} />\n                <Input bordered={false} placeholder=\"Match ID or URL\" className=\"input\" onChange={e => { setURL(e.target.value) }}/>\n                <Button className=\"button\" type=\"text\" onClick={search}>Analyze</Button>\n\n                {/* <div className=\"last-searched-container\">\n                    <span>Last searched match: </span>\n                </div> */}\n            </div>\n            <span className=\"version\">Closed Beta v{config.VERSION}</span>\n        </div>\n    )\n}\n\nexport default Home;","/Users/tsecret/Documents/GitHub/faceit-stats/src/pages/Match.tsx",["69","70","71","72","73","74","75"],"import React from 'react';\nimport '../App.scss';\nimport { useParams } from 'react-router-dom';\n\nimport { Input, Button } from 'antd';\nimport { MatchStatus, mapsImages, maps } from '../constants';\nimport api from '../api';\nimport utils from '../utils';\nimport config from '../config';\n\nimport { Divider } from 'antd';\n\nimport {\n    level1,\n    level2,\n    level3,\n    level4,\n    level5,\n    level6,\n    level7,\n    level8,\n    level9,\n    level10\n} from '../assets';\nimport { PlayerCard } from '../components';\n\nconst levels: {[index: string]:any} = {\n    1: level1,\n    2: level2,\n    3: level3,\n    4: level4,\n    5: level5,\n    6: level6,\n    7: level7,\n    8: level8,\n    9: level9,\n    10: level10,\n}\n\ninterface ParamTypes{\n    id: string;\n}\n\nconst Match = () => {\n    const [error, setError] = React.useState<string | null>();\n    const [loaded, setLoaded] = React.useState<Boolean>(false);\n    const [match, setMatch] = React.useState<any>();\n    const [voting, setVoting] = React.useState<any>();\n    const [players, setPlayers] = React.useState<any>();\n    const [mapsData, setMaps] = React.useState<any>();\n\n    const { id } = useParams<ParamTypes>();\n\n    const init = async () => {\n        const match = await api.fetchMatch(id);\n        if(!match) return setError(\"Match ID is invalid\")\n        setMatch(match);\n        const voting = await api.fetchVoting(id, 'map');\n        setVoting(voting);\n        parseMaps(match);\n        setLoaded(true);\n    }\n\n    const parseMaps = async (match: any) => {\n        if(!match) return;\n        // let data: any = {};\n        // let players: any = {faction1: {}, faction2: {}};\n        // // Create each map empty object\n        // maps.forEach(map => {data[map] = {}})\n        // for (var i of [1, 2]){\n        //     // Get ids of players from 1 team\n        //     const ids = match.teams[`faction${i}`].roster.map((player: any) => player.id);\n        //     // Get basic info\n        //     const players_info = await getPlayerInfo({ ids });\n        //     // Get past 100 matches\n        //     const players_stats = await getPlayerMatches({ ids });\n        //     players[`faction${i}`] = {players_info, players_stats}\n        //     // Filter matches and get average stats\n        //     for(const j in maps){\n        //         let team_data = ids.map((id: string, k: number) => {\n        //             let map_matches = players_stats[k].filter((match: any) => match['i1'] === maps[j]);\n        //             map_matches = convertMatches(map_matches);\n        //             map_matches = averageOfMatches(map_matches);\n        //             return map_matches;\n        //         })\n        //         data[maps[j]][`faction${i}`] = averageOfMatches(team_data);\n        //     }\n        // }\n        // data = countPoints(data);\n        // setData(data);\n        // processPlayers(players);\n\n        const players: any[] = utils.extractPlayers(match);\n        const playersInfo: any[] = await api.getPlayerInfo({ ids: players });\n        const playersMatches: any[] = await api.getPlayerMatches({ ids: players })\n        const playersMatchesAverage: any[] = playersMatches.map((matches: any[]) => utils.averageOfMatches(utils.convertMatches(matches)));\n        const toReturn: any[] = playersInfo.map((playerInfo: any, index: number) => { return { ...playerInfo, matches: playersMatchesAverage[index] } })\n        setPlayers(toReturn);\n\n        let mapsData: any = {}\n        maps.forEach((map: string) => {\n            mapsData[map] = { faction1: [], faction2: [] }\n            playersMatches.forEach((matches: any[], i:number) => {\n                const matchesOnMap: any[] = matches.filter((match: any) => match['Map'] === map)\n                let mapStats: any = utils.averageOfMatches(utils.convertMatches(matchesOnMap));\n                mapsData[map][`faction${i < 5? 1 : 2}`].push(mapStats);\n            })\n            mapsData[map].faction1 = utils.averageOfMatches(mapsData[map].faction1)\n            mapsData[map].faction2 = utils.averageOfMatches(mapsData[map].faction2)\n        })\n        mapsData = utils.countPoints(mapsData)\n        setMaps(mapsData)\n    }\n\n    const processPlayers = (players: any) => {\n        let toReturn: any[] = [];\n\n        // for(const faction in players){\n        //     console.log(players[faction].player_stats.map((stats: any) => {\n        //         let matches = convertMatches(stats);\n        //         matches = averageOfMatches(matches);\n        //         toReturn.push({ ...players[team].players_info[i], matches })\n        //     } ))\n        // }\n\n        // players[team].players_stats.forEach((player_matches: any, i: number) => {\n        //     let matches = convertMatches(player_matches);\n        //     matches = averageOfMatches(matches);\n        //     to_return.push({...players[team].players_info[i], matches})\n        // })\n\n        // console.log(to_return);\n        // setPlayers(to_return);\n    }\n\n    const renderTeams = () => {\n        if(!players) return null;\n        return <>\n            <div className=\"header\">Teams Overview</div>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        {players.slice(0, 5).map((player: any, i: number) => <PlayerCard player={player} side=\"left\" key={i} />)}\n                    </div>\n                    <div className=\"col\">\n                        {players.slice(5).map((player: any, i: number) => <PlayerCard player={player} side=\"right\" key={i} />)}\n                    </div>\n                </div>\n        </>\n    }\n\n    const renderMaps = () => {\n        if(!mapsData) return null;\n        return <>\n        <Divider />\n        <div className=\"header\">Map Analysis</div>\n            <div className=\"maps\">\n                {Object.keys(mapsData).map((mapName: string, i: number) => {\n                    let banned: boolean = false;\n                    let picked: boolean = false;\n                    if(voting){\n                        const vote = voting.find((MAP: any) => MAP.properties.guid === mapName)\n                        if(!vote) return;\n                        banned = vote.status === 'drop';\n                        picked = vote.status === 'pick';\n                    }\n                    return( \n                        <div key={mapName} className={`map ${banned && \"banned\"} ${picked && \"picked\"}`}>\n                            <div>\n                                <span className=\"points\">{mapsData[mapName].team1}</span>\n                                <img src={mapsImages[mapName]} alt=\"map\" className=\"mapImage\" />\n                                <span className=\"points\">{mapsData[mapName].team2}</span>\n                            </div>\n                            <div className=\"col\">\n                                {Object.keys(mapsData[mapName].faction1).map((key: string, j: number) => {return(\n                                    <div className=\"row\" key={j}>\n                                        <span className=\"key\">{key}:</span>\n                                        <span> {mapsData[mapName].faction1[key]} - {mapsData[mapName].faction2[key]}</span>\n                                    </div>\n                                )})}\n                            </div>\n                        </div>\n                )})}\n            </div>\n        </>\n    }\n\n    React.useEffect(() => {\n        init();\n    }, [])\n\n    return (\n        <div className=\"page\">\n            <div className=\"col container\" style={{ paddingBottom: 100 }}>\n                <span className=\"header\">Match</span>\n                {!loaded && !error? <span>Loading ...</span>\n                :!loaded && error? <span className=\"error\">{error}</span>\n                : loaded && match? (\n                    <>\n                        <div className=\"row\" style={{ justifyContent: \"center\" }}>\n                            <span className=\"text\">Status: {match.status}  •  Game: {match.game}  •  Region: {match.region}</span>\n                        </div>\n\n                        {match.status !== MatchStatus.FINISHED? <span className=\"header\">Current Score</span> : null }\n                        {match.results && match.status !== MatchStatus.FINISHED? (\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <span className=\"text\">{match.results[0].factions.faction1.score}</span>\n                                </div>\n                                <div className=\"col\">\n                                    <span className=\"text\">{match.results[0].factions.faction1.score}</span>\n                                </div>\n                            </div>\n\n                        ) : null}\n\n                        <Divider />\n\n                        {match.teams?.faction1?.stats && (\n                            <div className=\"col\">\n                                <span className=\"header\">Win Probability</span>\n                                <div className=\"row\" style={{ justifyContent: \"space-evenly\" }}>\n                                    <span className=\"text\">{(match.teams.faction1.stats.winProbability * 100).toFixed(2)}%</span>\n                                    <span className=\"text\">{(match.teams.faction2.stats.winProbability * 100).toFixed(2)}%</span>\n                                </div>\n                            </div>\n                        )}\n                        <Divider />\n\n                        {renderTeams()}\n                        \n                        {renderMaps()}\n                            \n                    </>\n                )\n                : null}\n                <Button className=\"button back\" type=\"ghost\" href=\"/\">Back</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Match;","/Users/tsecret/Documents/GitHub/faceit-stats/src/config/index.ts",[],"/Users/tsecret/Documents/GitHub/faceit-stats/src/utils/index.ts",["76","77"],"import { Match } from '../types';\nimport { FaceitIndex, average_allowed } from '../constants';\n\n\nconst trimURL = (url: string): string => url.split('/')[url.split('/').length - 1]\n\n// Convert snapshot to list\nconst getListFromSnapshot = (snapshot: any) => {\n    let items: any[] = [];\n    snapshot.forEach((item: { val: () => any; key: any; }) => { items.push( {...item.val(), key: item.key} )  })\n    return items;\n}\n\n// Sort matches by date created\nconst sortMatches = (matches: any[]) => {\n    return matches.sort((a: { createdAt: string | number | Date; },b: { createdAt: string | number | Date; }) => (new Date(a.createdAt).getTime() > new Date(b.createdAt).getTime()) ? 1 : ((new Date(b.createdAt).getTime() > new Date(a.createdAt).getTime()) ? -1 : 0)); \n}\n\n// Returns true if player id is in match\nconst checkMyselfInMatch = (match: any, id: String) => {\n    if(match && match.teams){\n        let players = [];\n        for (const [key, value] of Object.entries(match.teams)){\n            for(var i in match.teams[key].roster){\n                players.push(match.teams[key].roster[i].id)\n            }\n        }\n        return players.includes(id)\n    } else {\n        return false;\n    }\n}\n\nconst convertMatches = (matches: any[]) => {\n    let indexes = Object.keys(FaceitIndex)\n    return matches.map((match: any) => {\n        for(const [key, value] of Object.entries(match)){\n            if(indexes.includes(key)){\n                match[FaceitIndex[key]] = value;\n                delete match[key];\n            }\n        }\n        return match;\n    })\n}\n\nconst average = (array: any[]) => {\n    return +(array.reduce((a: string, b: string) => parseFloat(a) + parseFloat(b)) / array.length).toFixed(2);\n}\n\nconst averageOfMatches = (matches: any[]) => {\n    let average: any = {};\n    average_allowed.forEach((key: string | number) => {\n        let matches_ = matches.map((match: { [x: string]: any; }) => match[key]);\n        average[key] = matches_.length > 0? +(matches_.reduce((a: string,b: string) => parseFloat(a) + parseFloat(b)) / matches_.length).toFixed(2) : 0\n    })\n    return average; \n}\n\nconst countPoints = (data: any) => {\n    for(const [map, overall_stats] of Object.entries(data)){\n        let stats:any = overall_stats;\n        let team1 = 0;\n        let team2 = 0;\n        for(var key of average_allowed){\n            if(stats['faction1'][key] > stats['faction2'][key] && key !== 'Deaths'){\n                team1++;\n            } else if(stats['faction1'][key] < stats['faction2'][key] && key !== 'Deaths') {\n                team2++;\n            } else if(key === 'Deaths' && stats['faction1'][key] > stats['faction2'][key]){\n                team2++;\n            } else if(key === 'Deaths' && stats['faction1'][key] < stats['faction2'][key]){\n                team1++;\n            } else {\n                team1++;\n                team2++;\n            }\n        }\n        data[map]['team1'] = team1;\n        data[map]['team2'] = team2;\n    }\n    return data;\n}\n\nconst getLastSearched = () => {\n    const lastSearched: any = localStorage.last_searched;\n    if(!lastSearched) return []\n    return JSON.parse(lastSearched)\n}\n\nconst addLastSearched = (id: string) => {\n    let lastSearched: string[] = getLastSearched();\n    lastSearched = [id, ...lastSearched]\n    if(lastSearched.length > 5) lastSearched = lastSearched.slice(0, 5)\n    localStorage.setItem(\"last_searched\", JSON.stringify(lastSearched))\n}\n\nconst extractPlayers = (match: Match) => {\n    let players = [];\n    try{\n        if(match.teams){\n            for(const i in match.teams){\n                players.push(...match.teams[i].roster.map(user => user.id))\n            }\n        }\n    } catch(err){\n        console.log(`Match ${match.id} error - ${err}`)\n    }\n    return players;\n}\n\n\nexport default {\n    trimURL,\n    getListFromSnapshot,\n    sortMatches,\n    checkMyselfInMatch,\n    convertMatches,\n    average,\n    averageOfMatches,\n    countPoints,\n    getLastSearched,\n    addLastSearched,\n    extractPlayers\n};","/Users/tsecret/Documents/GitHub/faceit-stats/src/api/index.ts",["78"],"import axios from 'axios';\n\nconst fetchMatch = async (id: String) => \n    await axios.get(`https://api.faceit.com/match/v2/match/${id}`)\n    .then((res: { data: any; }) => res.data.payload)\n    .catch((error: {response: any}) => { console.log(error) })\n\nconst fetchVoting = async (id: String, entity_type: String) =>\n    await axios.get(`https://api.faceit.com/democracy/v1/match/${id}`)\n    .then((res: any) => res.data.payload.tickets.find((entity: { entity_type: string; }) => entity.entity_type === entity_type).entities)\n    .catch((error: {response: any}) => {console.log(error)})\n\nconst getPlayerInfo = async ({nickname, id, nicknames, ids}: any) => {\n    if(nickname){\n        return await axios.get(`https://api.faceit.com/core/v1/nicknames/${nickname}`)\n        .then((res: { data: { payload: any; }; }) => res.data.payload)\n        .catch((error: any) => {console.log(error);})\n    } else if(id){\n        return await axios.get(`https://api.faceit.com/core/v1/users/${id}`)\n        .then((res: { data: any; }) => res.data.payload)\n        .catch((error: any) => {console.log(error)})\n    } else if(nicknames){\n        let promises = nicknames.map((nickname: any) => axios.get(`https://api.faceit.com/core/v1/nicknames/${nickname}`))\n        return await axios.all(promises)\n        .then(axios.spread((...responses: any[]) => {\n            return responses.map(response => response.data.payload)\n        }))\n    } else if(ids){\n        let promises = ids.map((id: any) => axios.get(`https://api.faceit.com/core/v1/users/${id}`))\n        return await axios.all(promises)\n        .then(axios.spread((...responses: any[]) => {\n            return responses.map(response => response.data.payload)\n        }))\n    }\n}\n\nconst getPlayerMatches = async ({id, ids}: any) => {\n    if(id){\n        return await axios.get(`https://api.faceit.com/stats/v1/stats/time/users/${id}/games/csgo`)\n        .then((res: { data: any; }) => res.data)\n        .catch((error: any) => {console.log(error);})\n    } else {\n        let promises = ids.map((id: any) => axios.get(`https://api.faceit.com/stats/v1/stats/time/users/${id}/games/csgo`))\n        return await axios.all(promises)\n        .then(axios.spread((...responses: any[]) => {\n            return responses.map(response => response.data)\n        }))\n    }\n}\n\nexport default {\n    fetchMatch,\n    fetchVoting,\n    getPlayerInfo,\n    getPlayerMatches\n}","/Users/tsecret/Documents/GitHub/faceit-stats/src/assets/index.ts",[],"/Users/tsecret/Documents/GitHub/faceit-stats/src/constants/index.ts",[],"/Users/tsecret/Documents/GitHub/faceit-stats/src/components/index.ts",[],"/Users/tsecret/Documents/GitHub/faceit-stats/src/components/PlayerCard.tsx",[],"/Users/tsecret/Documents/GitHub/faceit-stats/src/components/Feedback.tsx",["79","80","81","82"],"import React from 'react'\n\nimport { Modal, Button, Input, Form } from 'antd';\n\nconst Feedback = ({ visible, switchModal }: any) => {\n    const [message, setMessage] = React.useState<string>(\"\");\n\n    const onSubmit = (): void => {\n\n\n        switchModal(false);\n    }\n\n    const onClose = (): void => {\n        switchModal(false);\n    }\n\n    return (\n        <Modal\n            visible={visible}\n            onOk={onSubmit}\n            onCancel={onClose}\n            footer={[\n                <Button className=\"button\" type=\"ghost\" onClick={onClose}>Cancel</Button>,\n                <Button className=\"button\" type=\"ghost\" onClick={onSubmit}>Submit</Button>\n            ]}\n        >\n            Hello\n        </Modal>\n    )\n}\n\nexport default Feedback;",["83","84"],"/Users/tsecret/Documents/GitHub/faceit-stats/src/pages/index.ts",[],"/Users/tsecret/Documents/GitHub/faceit-stats/src/pages/Player.tsx",["85","86"],"import React from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport api from '../api';\nimport utils from '../utils';\n\nconst Player = () => {\n    const [player, setPlayer] = React.useState<any>();\n    const [matches, setMatches] = React.useState<any[]>();\n\n    const { id }: any = useParams();\n    const history: any = useHistory();\n\n    const init = async () => {\n        const playerData: any = await api.getPlayerInfo({ id })\n        const playerMatches: any[] = await api.getPlayerMatches({ id })\n        .then((matches: any[]) => utils.convertMatches(matches))\n\n\n        setPlayer(playerData);\n        setMatches(playerMatches);\n    }\n\n    React.useEffect(() => {\n        init();\n    }, [])\n\n    if(!player || !matches) return null;\n    \n\n    return (\n        <div className=\"page\">\n            <div className=\"container\">\n                <span>{player.nickname}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Player;",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":11,"column":12,"nodeType":"93","messageId":"94","endLine":11,"endColumn":24},{"ruleId":"91","severity":1,"message":"95","line":5,"column":10,"nodeType":"93","messageId":"94","endLine":5,"endColumn":15},{"ruleId":"91","severity":1,"message":"96","line":9,"column":8,"nodeType":"93","messageId":"94","endLine":9,"endColumn":14},{"ruleId":"91","severity":1,"message":"97","line":27,"column":7,"nodeType":"93","messageId":"94","endLine":27,"endColumn":36},{"ruleId":"91","severity":1,"message":"98","line":115,"column":11,"nodeType":"93","messageId":"94","endLine":115,"endColumn":25},{"ruleId":"91","severity":1,"message":"99","line":116,"column":13,"nodeType":"93","messageId":"94","endLine":116,"endColumn":28},{"ruleId":"100","severity":1,"message":"101","line":162,"column":35,"nodeType":"102","messageId":"103","endLine":162,"endColumn":42},{"ruleId":"104","severity":1,"message":"105","line":189,"column":8,"nodeType":"106","endLine":189,"endColumn":10,"suggestions":"107"},{"ruleId":"91","severity":1,"message":"108","line":23,"column":26,"nodeType":"93","messageId":"94","endLine":23,"endColumn":31},{"ruleId":"109","severity":1,"message":"110","line":113,"column":1,"nodeType":"111","endLine":125,"endColumn":3},{"ruleId":"109","severity":1,"message":"110","line":51,"column":1,"nodeType":"111","endLine":56,"endColumn":2},{"ruleId":"91","severity":1,"message":"95","line":3,"column":25,"nodeType":"93","messageId":"94","endLine":3,"endColumn":30},{"ruleId":"91","severity":1,"message":"112","line":3,"column":32,"nodeType":"93","messageId":"94","endLine":3,"endColumn":36},{"ruleId":"91","severity":1,"message":"113","line":6,"column":12,"nodeType":"93","messageId":"94","endLine":6,"endColumn":19},{"ruleId":"91","severity":1,"message":"114","line":6,"column":21,"nodeType":"93","messageId":"94","endLine":6,"endColumn":31},{"ruleId":"87","replacedBy":"115"},{"ruleId":"89","replacedBy":"116"},{"ruleId":"91","severity":1,"message":"117","line":12,"column":11,"nodeType":"93","messageId":"94","endLine":12,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":26,"column":8,"nodeType":"106","endLine":26,"endColumn":10,"suggestions":"118"},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"@typescript-eslint/no-unused-vars","'lastSearched' is assigned a value but never used.","Identifier","unusedVar","'Input' is defined but never used.","'config' is defined but never used.","'levels' is assigned a value but never used.","'processPlayers' is assigned a value but never used.","'toReturn' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.","ArrayExpression",["121"],"'value' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Form' is defined but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.",["119"],["120"],"'history' is assigned a value but never used.",["122"],"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"123","fix":"125"},"Update the dependencies array to be: [init]",{"range":"126","text":"127"},{"range":"128","text":"127"},[7386,7388],"[init]",[716,718]]